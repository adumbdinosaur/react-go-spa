// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// LoginPost200Response defines model for _login_post_200_response.
type LoginPost200Response struct {
	// Token The JWT token for the authenticated user
	Token *string `json:"token,omitempty"`
}

// LoginPostRequest defines model for _login_post_request.
type LoginPostRequest struct {
	// Password The password of the user
	Password *string `json:"password,omitempty"`

	// Username The username of the user
	Username *string `json:"username,omitempty"`
}

// QueryPost200Response defines model for _query_post_200_response.
type QueryPost200Response struct {
	Results *[]string `json:"results,omitempty"`
}

// QueryPostRequest defines model for _query_post_request.
type QueryPostRequest struct {
	// FileName The name of the file to search
	FileName *string `json:"fileName,omitempty"`

	// Query The query string
	Query *string `json:"query,omitempty"`
}

// RegisterPost201Response defines model for _register_post_201_response.
type RegisterPost201Response struct {
	// Message A success message
	Message *string `json:"message,omitempty"`

	// Token The JWT token for the authenticated user
	Token *string `json:"token,omitempty"`
}

// RegisterPostRequest defines model for _register_post_request.
type RegisterPostRequest struct {
	// Password The password for the new user
	Password *string `json:"password,omitempty"`

	// Username The username for the new user
	Username *string `json:"username,omitempty"`
}

// UploadPost200Response defines model for _upload_post_200_response.
type UploadPost200Response struct {
	Message *string `json:"message,omitempty"`
}

// UploadPostRequest defines model for _upload_post_request.
type UploadPostRequest struct {
	// File The plain text file to upload
	File *openapi_types.File `json:"file,omitempty"`
}

// UserFilesGet200Response defines model for _user_files_get_200_response.
type UserFilesGet200Response struct {
	// Files List of files owned by the user
	Files *[]string `json:"files,omitempty"`
}

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginPostRequest

// PostQueryJSONRequestBody defines body for PostQuery for application/json ContentType.
type PostQueryJSONRequestBody = QueryPostRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterPostRequest

// PostUploadMultipartRequestBody defines body for PostUpload for multipart/form-data ContentType.
type PostUploadMultipartRequestBody = UploadPostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// CORS preflight
	// (OPTIONS /login)
	OptionsLogin(w http.ResponseWriter, r *http.Request)
	// Login a user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// CORS preflight
	// (OPTIONS /query)
	OptionsQuery(w http.ResponseWriter, r *http.Request)
	// Query the uploaded document
	// (POST /query)
	PostQuery(w http.ResponseWriter, r *http.Request)
	// CORS preflight
	// (OPTIONS /register)
	OptionsRegister(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// CORS preflight
	// (OPTIONS /upload)
	OptionsUpload(w http.ResponseWriter, r *http.Request)
	// Upload a text file
	// (POST /upload)
	PostUpload(w http.ResponseWriter, r *http.Request)
	// Get the list of files owned by the authenticated user
	// (GET /user/files)
	GetUserFiles(w http.ResponseWriter, r *http.Request)
	// CORS preflight
	// (OPTIONS /user/files)
	OptionsUserFiles(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// OptionsLogin operation middleware
func (siw *ServerInterfaceWrapper) OptionsLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsQuery operation middleware
func (siw *ServerInterfaceWrapper) OptionsQuery(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsQuery(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostQuery operation middleware
func (siw *ServerInterfaceWrapper) PostQuery(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostQuery(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsRegister operation middleware
func (siw *ServerInterfaceWrapper) OptionsRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsUpload operation middleware
func (siw *ServerInterfaceWrapper) OptionsUpload(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUpload operation middleware
func (siw *ServerInterfaceWrapper) PostUpload(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserFiles operation middleware
func (siw *ServerInterfaceWrapper) GetUserFiles(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OptionsUserFiles operation middleware
func (siw *ServerInterfaceWrapper) OptionsUserFiles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OptionsUserFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/login", wrapper.OptionsLogin).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/login", wrapper.PostLogin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/query", wrapper.OptionsQuery).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/query", wrapper.PostQuery).Methods("POST")

	r.HandleFunc(options.BaseURL+"/register", wrapper.OptionsRegister).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/register", wrapper.PostRegister).Methods("POST")

	r.HandleFunc(options.BaseURL+"/upload", wrapper.OptionsUpload).Methods("OPTIONS")

	r.HandleFunc(options.BaseURL+"/upload", wrapper.PostUpload).Methods("POST")

	r.HandleFunc(options.BaseURL+"/user/files", wrapper.GetUserFiles).Methods("GET")

	r.HandleFunc(options.BaseURL+"/user/files", wrapper.OptionsUserFiles).Methods("OPTIONS")

	return r
}
