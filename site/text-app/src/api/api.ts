/* tslint:disable */
/* eslint-disable */
/**
 * Search API
 * An API that allows uploading a plain text document, querying it for relevant snippets using fuzzy search, and managing user authentication. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface LoginPost200Response
 */
export interface LoginPost200Response {
    /**
     * The JWT token for the authenticated user
     * @type {string}
     * @memberof LoginPost200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface LoginPostRequest
 */
export interface LoginPostRequest {
    /**
     * The username of the user
     * @type {string}
     * @memberof LoginPostRequest
     */
    'username'?: string;
    /**
     * The password of the user
     * @type {string}
     * @memberof LoginPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LogoutPost200Response
 */
export interface LogoutPost200Response {
    /**
     * 
     * @type {string}
     * @memberof LogoutPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface QueryPost200Response
 */
export interface QueryPost200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof QueryPost200Response
     */
    'results'?: Array<string>;
}
/**
 * 
 * @export
 * @interface QueryPostRequest
 */
export interface QueryPostRequest {
    /**
     * The query string
     * @type {string}
     * @memberof QueryPostRequest
     */
    'query'?: string;
    /**
     * The name of the file to search
     * @type {string}
     * @memberof QueryPostRequest
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface RegisterPost201Response
 */
export interface RegisterPost201Response {
    /**
     * A success message
     * @type {string}
     * @memberof RegisterPost201Response
     */
    'message'?: string;
    /**
     * The JWT token for the authenticated user
     * @type {string}
     * @memberof RegisterPost201Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface RegisterPostRequest
 */
export interface RegisterPostRequest {
    /**
     * The username for the new user
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'username'?: string;
    /**
     * The password for the new user
     * @type {string}
     * @memberof RegisterPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UploadPost200Response
 */
export interface UploadPost200Response {
    /**
     * 
     * @type {string}
     * @memberof UploadPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UserFilesGet200Response
 */
export interface UserFilesGet200Response {
    /**
     * List of files owned by the user
     * @type {Array<string>}
     * @memberof UserFilesGet200Response
     */
    'files'?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login a user
         * @param {LoginPostRequest} loginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginPostRequest: LoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginPostRequest' is not null or undefined
            assertParamExists('loginPost', 'loginPostRequest', loginPostRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalidates the user\'s session and clears the session cookie.
         * @summary Log out the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query the uploaded document
         * @param {QueryPostRequest} queryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPost: async (queryPostRequest: QueryPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryPostRequest' is not null or undefined
            assertParamExists('queryPost', 'queryPostRequest', queryPostRequest)
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterPostRequest} registerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registerPostRequest: RegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerPostRequest' is not null or undefined
            assertParamExists('registerPost', 'registerPostRequest', registerPostRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a text file
         * @param {File} [file] The plain text file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of files owned by the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFilesOptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login a user
         * @param {LoginPostRequest} loginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginPostRequest: LoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.loginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logoutOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Invalidates the user\'s session and clears the session cookie.
         * @summary Log out the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Query the uploaded document
         * @param {QueryPostRequest} queryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryPost(queryPostRequest: QueryPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryPost(queryPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {RegisterPostRequest} registerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registerPostRequest: RegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registerPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a text file
         * @param {File} [file] The plain text file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPost(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get the list of files owned by the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFilesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFilesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFilesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFilesOptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFilesOptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.userFilesOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loginOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login a user
         * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginPost200Response> {
            return localVarFp.loginPost(requestParameters.loginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logoutOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalidates the user\'s session and clears the session cookie.
         * @summary Log out the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options?: RawAxiosRequestConfig): AxiosPromise<LogoutPost200Response> {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query the uploaded document
         * @param {DefaultApiQueryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPost(requestParameters: DefaultApiQueryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QueryPost200Response> {
            return localVarFp.queryPost(requestParameters.queryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterPost201Response> {
            return localVarFp.registerPost(requestParameters.registerPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a text file
         * @param {DefaultApiUploadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost(requestParameters: DefaultApiUploadPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UploadPost200Response> {
            return localVarFp.uploadPost(requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the list of files owned by the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<UserFilesGet200Response> {
            return localVarFp.userFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Responds to CORS preflight requests
         * @summary CORS preflight
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFilesOptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userFilesOptions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    loginOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Login a user
     * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginPost200Response>;

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    logoutOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Invalidates the user\'s session and clears the session cookie.
     * @summary Log out the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    logoutPost(options?: RawAxiosRequestConfig): AxiosPromise<LogoutPost200Response>;

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    queryOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Query the uploaded document
     * @param {DefaultApiQueryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    queryPost(requestParameters: DefaultApiQueryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<QueryPost200Response>;

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    registerOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Register a new user
     * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterPost201Response>;

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    uploadOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Upload a text file
     * @param {DefaultApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    uploadPost(requestParameters?: DefaultApiUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadPost200Response>;

    /**
     * 
     * @summary Get the list of files owned by the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<UserFilesGet200Response>;

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userFilesOptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for loginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiLoginPostRequest
 */
export interface DefaultApiLoginPostRequest {
    /**
     * 
     * @type {LoginPostRequest}
     * @memberof DefaultApiLoginPost
     */
    readonly loginPostRequest: LoginPostRequest
}

/**
 * Request parameters for queryPost operation in DefaultApi.
 * @export
 * @interface DefaultApiQueryPostRequest
 */
export interface DefaultApiQueryPostRequest {
    /**
     * 
     * @type {QueryPostRequest}
     * @memberof DefaultApiQueryPost
     */
    readonly queryPostRequest: QueryPostRequest
}

/**
 * Request parameters for registerPost operation in DefaultApi.
 * @export
 * @interface DefaultApiRegisterPostRequest
 */
export interface DefaultApiRegisterPostRequest {
    /**
     * 
     * @type {RegisterPostRequest}
     * @memberof DefaultApiRegisterPost
     */
    readonly registerPostRequest: RegisterPostRequest
}

/**
 * Request parameters for uploadPost operation in DefaultApi.
 * @export
 * @interface DefaultApiUploadPostRequest
 */
export interface DefaultApiUploadPostRequest {
    /**
     * The plain text file to upload
     * @type {File}
     * @memberof DefaultApiUploadPost
     */
    readonly file?: File
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login a user
     * @param {DefaultApiLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginPost(requestParameters: DefaultApiLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).loginPost(requestParameters.loginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logoutOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logoutOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalidates the user\'s session and clears the session cookie.
     * @summary Log out the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query the uploaded document
     * @param {DefaultApiQueryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryPost(requestParameters: DefaultApiQueryPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryPost(requestParameters.queryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {DefaultApiRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerPost(requestParameters: DefaultApiRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerPost(requestParameters.registerPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a text file
     * @param {DefaultApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadPost(requestParameters: DefaultApiUploadPostRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadPost(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the list of files owned by the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userFilesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Responds to CORS preflight requests
     * @summary CORS preflight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userFilesOptions(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userFilesOptions(options).then((request) => request(this.axios, this.basePath));
    }
}



